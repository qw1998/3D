### 1.简答题
-
    - **区别**：游戏对象会在游戏界面中显示出来，而资源不一定会在界面中显示出来；制作者可以在属性栏中对游戏对象进行修改，而资源的修改一般不能或不在当前界面中进行；资源的范围要比游戏对象大，比如代码文件，unity文件等。
    - **联系**：游戏对象可以通过拖拉成为资源，资源中的object也可以通过拖拉成为游戏对象，而资源中的代码文件等可以通过拖拉成为游戏对象的绑定事件或属性。
    
-
    - Assert资源目录：Scripts存放脚本代码，Prefabs存放预制，Textures/Icons存放小图标，scence/environment存放环境对象，audio存放音频，animation存放动画，art存放美术用件（有可能有环境对象）。
    - 游戏对象目录：environment存放环境对象（一般指不会出现交互反应的，main camera和light在这里），player存放人物，goal存放终点，其他的交互对象与上述文件夹同级。   
    
- 代码如下：
    ``` C#
    using System.Collections;
    using System.Collections.Generic;
    using UnityEngine;

    public class Init : MonoBehaviour {

    	public Transform table;
    	void Start () {
    		Debug.Log ("Start");
    	}
    
    	void OnGUI(){
    		if (GUILayout.Button ("Press")) {
    			Debug.Log ("You pressed button.");//log when the button is pressed
    		}
    	}
    
    	void Update () {
    		Debug.Log ("Update");
    	}
    
    	void Awake(){
    		Debug.Log ("Awake");
    	}
    
    	void FixedUpdate(){
    		Debug.Log ("Fixed Update");
    	}
    
    	void LateUpdate(){
    		Debug.Log ("Late Update");
    	}
    
    	void OnEnable(){
    		Debug.Log ("Enable");
    	}
    
    	void OnDisable(){
    		Debug.Log ("Disable");
    	}
    }

    ```
    ![图片](https://github.com/lossatsea/homework/blob/master/homework1/pictures/1.png)


- 
    - 
        - GameObject：unity视图中所有实例的基本类。
        - Transform：一个对象的位置，角度和大小。
        - Component：与游戏对象绑定的所有事物。
    - table 的对象是 GameObject，属性有activeSelf, isStatic, layer, tag, prefab。Transform的属性有position, rotation, scale。table的组件有Transform, Cube(Mesh Filter), Box Collider, Mesh Renderer。
    - 
        ![图片](https://github.com/lossatsea/homework/blob/master/homework1/pictures/12.png)

    


-
    - 查找对象
        ``` C#
        //find the object named "table"
    	var target = GameObject.Find("table");
    	if (target != null)
    		Debug.Log ("We find the table");
    	else
    		Debug.Log ("We can't find the table");
        ```
        ![图片](https://github.com/lossatsea/homework/blob/master/homework1/pictures/11.png)
    - 添加子对象
        ```C#
        //add a cube as the son of Init
    	GameObject cube = GameObject.CreatePrimitive (PrimitiveType.Cube);
    	cube.name = "a cube";
    	cube.transform.position = new Vector3 (0, Random.Range (0, 5), 0);
    	cube.transform.parent = this.transform;
        ```
        ![图片](https://github.com/lossatsea/homework/blob/master/homework1/pictures/3.png)
    - 遍历对象树
        ``` C#
        //find the object tree
    	Debug.Log ("Level: 0 : " + target.transform.name);
    	int level = 1;
    	findAllSon(target, level);
        ```
        ``` C#
        //find the obgect tree
    	void findAllSon(GameObject target, int level){
    		for (var i = 0; i < target.transform.childCount; i++) {
    			Debug.Log ("Level: " + level + ": " + target.transform.GetChild(i).name);
    			if (target.transform.GetChild (i).transform.childCount > 0) {
    				findAllSon (target.transform.GetChild (i).gameObject, level + 1);
    			}
    		}
    	}
        ```
        ![图片](https://github.com/lossatsea/homework/blob/master/homework1/pictures/10.png)
        ![图片](https://github.com/lossatsea/homework/blob/master/homework1/pictures/4.png)
    - 清除所有子对象
        ``` c#
        //clear all son of object
    	clearSon(target);
        ```
        ``` C#
        //clear all son of object
    	void clearSon(GameObject target){
    		for (var i = 0; i < target.transform.childCount; i++) {
    			Destroy (target.transform.GetChild(i).gameObject);
    		}
    	}
        ```
        ![图片](https://github.com/lossatsea/homework/blob/master/homework1/pictures/3.png)
        
        
-
    - 预设可以重复创建多个结构相同的游戏对象和他们的相对关系，节省操作时间的同时批量制造。
    - 预设与克隆都可以以一个标准进行批量生产游戏对象，对于预设来说就是资源目录中的模板，对于克隆来说就是被克隆对象。区别在于克隆需要场景中有被克隆对象，预设则不需要，克隆体不会随被克隆体改变而改变，预设生成物会随预设改变而改变。可以说，预设生成物是预设的瞬时克隆体。
    - 预设实例化
        ```C#
        GameObject newTable = (GameObject)Instantiate(Resources.Load("Prefabs/table")); 
        ```
        ![图片](https://github.com/lossatsea/homework/blob/master/homework1/pictures/5.png)
        ![图片](https://github.com/lossatsea/homework/blob/master/homework1/pictures/6.png)
        ![图片](https://github.com/lossatsea/homework/blob/master/homework1/pictures/7.png)
        
        
-
    - 组合模式在unity中的表现就是游戏对象的树状结构，它将一组对象当作一个对象进行处理，比较直观的就是之前的预制，我们可以将整个对象树作为一个对象进行预制，子节点位置都是相对根节点设置，还有广播函数，它是叶节点的接口一致化的结果，通过这样就可以通过根节点对整个对象树进行操作，是化零为整的典型例子。
    - 根节点table：
        ``` C#
        public class table : MonoBehaviour {

        	// Use this for initialization
        	void Start () {
        		//Debug.Log ("Camera Start");
        	}
        
        	void Awake(){
        		int count = 0;
        		BroadcastMessage("count", count);
        	}
        	
        	// Update is called once per frame
        	void Update () {
        		// Debug.Log ("Camera Update");
        	}
        }
        ```
        叶节点chair1，chair2，chair3，chair4：
        ``` C#
        public class chair1 : MonoBehaviour {

        	public int no = 1;
        	// Use this for initialization
        	void Start () {
        		
        	}
        
        	void count(int number){
        		Debug.Log (no + number);
        	}
        	// Update is called once per frame
        	void Update () {
        		
        	}
        }
        ```
        ``` C#
        public class chair2 : MonoBehaviour {

        	public int no = 2;
        	// Use this for initialization
        	void Start () {
        
        	}
        
        	void count(int number){
        		Debug.Log (no + number);
        	}
        	// Update is called once per frame
        	void Update () {
        		
        	}
        }
        ```
        ``` C#
        public class chair3 : MonoBehaviour {

            	public int no = 3;
            	// Use this for initialization
            	void Start () {
            
            	}
            
            	void count(int number){
            		Debug.Log (no + number);
            	}
            	// Update is called once per frame
            	void Update () {
            		
            	}
            }
        ```
        ``` C#
        public class chair4 : MonoBehaviour {

        	public int no = 4;
        	// Use this for initialization
        	void Start () {
        
        	}
        
        	void count(int number){
        		Debug.Log (no + number);
        	}
        	// Update is called once per frame
        	void Update () {
        		
        	}
        }
        ```
        ![图片](https://github.com/lossatsea/homework/blob/master/homework1/pictures/8.png)
    
### 2.编程题
``` C#
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class main : MonoBehaviour {

    //save the state of screen
    public int[,] screen = new int[3, 3];
    //the turn of current player, 1: O, 2: x
    public int player = 1;
    //the player as string
    public char[] players = { ' ', 'O', 'X' };
    // Use this for initialization
    void Start () {
        reset ();
    }

    void OnGUI(){
        //the style of text
        GUIStyle resultString =new GUIStyle();
        resultString.fontSize = 20;
        resultString.normal.textColor = new Color (0, 0, 0);
        resultString.alignment = TextAnchor.MiddleCenter;
        GUIStyle playerString =new GUIStyle();
        playerString.fontSize = 10;
        playerString.alignment = TextAnchor.LowerLeft;

        //put out which player's turn
        GUI.Label (new Rect ((Screen.width - 100) / 2 - 70, (Screen.height - 190) / 2, 70, 20), "player: " + players[player], playerString);

        //the clear button
        if (GUI.Button (new Rect ((Screen.width - 100) / 2, (Screen.height - 190) / 2 + 160, 100, 30), "clear")) {
            reset ();
        }

        //output the game screen
        int result = isOver ();
        int count = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (screen [i, j] == 0) {
                    count++;
                    if (GUI.Button (new Rect ((Screen.width - 120) / 2 + i * 40, (Screen.height - 190) / 2 + j * 40, 40, 40), "") && result == 0) {
                        screen [i, j] = player;
                        player = 3 - player;
                    }
                } else {
                    GUI.Button (new Rect ((Screen.width - 120) / 2 + i * 40, (Screen.height - 190) / 2 + j * 40, 40, 40), players[screen[i, j]].ToString());
                }
            }
        }

        //judge the result of game
        if (count == 0 && result == 0) {
            GUI.Label (new Rect ((Screen.width - 100) / 2, (Screen.height - 190) / 2 + 120, 100, 40), "平局", resultString);
        } else if(result != 0){
            GUI.Label (new Rect ((Screen.width - 100) / 2, (Screen.height - 190) / 2 + 120, 100, 40), "Winner: " + players[result], resultString);
        }
    }

    //clear the game screen
    void reset(){
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                screen [i, j] = 0;
            }
        }
        player = 1;
    }

    //return the current result, 0: goingon or draw, 1: O wins, 2: X wins
    int isOver(){
        int result = 0;
        for (int i = 0; i < 3; i++) {
            if (screen [i, 0] == screen [i, 1] && screen [i, 1] == screen [i, 2])
                result = screen[i, 0];
        }
        for (int i = 0; i < 3; i++) {
            if (screen [0, i] == screen [1, i] && screen [1, i] == screen [2, i])
                result = screen[0, i];
        }
        if (screen [0, 0] == screen [1, 1] && screen [1, 1] == screen [2, 2])
            result = screen [0, 0];
        if (screen [0, 2] == screen [1, 1] && screen [1, 1] == screen [2, 0])
            result = screen [0, 2];
        return result;
    }
}

```

视频演示在vedio文件夹中
